s5[,2]
rank(s5[,2])
?rankall
s6[1]
s6 <- order(s5[,2])
s6
s5
s5
order(s5[,2], s5[,1])
order(s5[,2], s5[,1])[1]
sort(s5)
sort(s5[,2])
order(s5)
s7 <- order (s5[,2])
s7
s8 <- rank (s5[,2])
s8
s8 <- rank(s5[,2], na.last=NA)
s8
s8 <- rank(s5[,2], na.last=NA, ties.method="first")
s8
seq_len(s5)
seq_len(s5[,2])
s8
s7
d1 <- c(8, 4, 3, 1, 9)
r1 <- rank(d1)
r1
d1[r1$1]
r2 <- order(d1)
r2
r1 <- rank(d1, na.last=NA, ties.method="first")
r1
d1[r1[1]]
d1[r1[2]]
r1[1]
s6
s5[[s6],]
s5[s6[1],]
stateData <- outcome[outcome$State == "TX"]
names(outcome)
stateData <- outcome[outcome$State == 'TX']
stateData <- outcome[outcome$State == "TX"]
outcome$State
stateData <- outcome[outcome$State == "TX",]
stateDAta
StateData
stateData
statedata <- outcome[outcome$State == state, ]
statedata <- outcome[outcome$State == "TX", ]
deathdata <- as.numeric(stateata[,11])
deathdata <- as.numeric(statedata[,11])
rankStateData <- rank(deathdata, na.last=NA, ties.method="first")
hospital <- deathdata (deathdata[rankStateData[1],],2)
hospital <- deathdata [deathdata[rankStateData[1],],2]
hospital <- deathdata [rankStateData[1],2]
hospital <- deathdata [rankStateData[1,],2]
hospital <- deathdata [rankStateData[1],2]
hospital <- statedata [rankStateData[1],2]
hospital
rankStateData <- rank(deathdata, ties.method="first")
hospital <- statedata [rankStateData[1],2]
hospital
rankStateData <- rank(deathdata)
hospital <- statedata [rankStateData[1],2]
hospital
rankStateDAta
rankStateData
rankStateData <- rank(deathdata, na.last=NA, ties.method="first")
rankStateData
str(rankStateData)
str(statedata)
str(deathdata)
rankStateData <- rank(deathdata, ties.method="first")
str(rankStateData)
statedata <- statedata[complete.cases(statedata[,11]),]
str(statedata)
str(statedata)
a <- c(4.1, 3.2, 6.1, 3.1)
order(a)
rank(a)
a[order(a)]
deathdata <- as.numeric(statedata[,c(7,2,11)])
statedatedata <- statedata[,c(7,2,11)]
deathdata <- as.numeric(statedata[,3])
deathdata <- na.omit(deathdata)
rankStateData <- rank(deathdata, na.last=NA, ties.method="first")
hospital <- statedata [rankStateData[1],2]
hospital
str(deathdata)
t
deathdata
deathdata <- as.numeric(statedata[,3])
str(deathdata)
statedata <- statedata[,c(7,2,11)]
str(statedata)
deathdata <- as.numeric(statedata[,3])
str(deathdata)
deathdata[,3] <- as.numeric(statedata[,3])
str(deathdata)
statedata[,3] <- as.numeric(statedata[,3])
str(statedata)
statedata <- na.omit(statedata)
str(statedata)
rankStateData <- rank(statedata, na.last=NA, ties.method="first")
hospital <- statedata [rankStateData[1],2]
hospital
rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
str(rankStateData)
hospital <- statedata [rankStateData[1],2]
hospital
statedata
statedata
rankStateData
rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
rankStateDAta
rankStateData
stateData
str(stateData)
statedata
hospital
hospital <- statedata [rankStateData[1],2]
hospital
order(statedata)
statedata
statedata
orderStateData <- order(statedata[,3], na.last=NA)
orderStateData
orderStateData[1]
hospital <- statedata [orderStateData[1],2]
hospital
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
## Validate State
#### Fill validation
statedata <- data[data$State == state, ]  # filters the data frame to corresponding state;
if (outcome == 'heart attack') {
statedata <- statedata[,c(7,2,11)]
} else if (outcome == 'heart failure') {
statedata <- statedata[,c(7,2,17)]
} else if (outcome == 'pneumonia') {
statedata <- statedata[,c(7,2,23)]
} else {
stop("invalid outcome")
}
statedata[,3] <- as.numeric(statedata[,3])
statedata <- na.omit(statedata)
## Return hospital name in that state with lowest 30-day death
orderStateData <- order(statedata[,3], na.last=NA)
hospital <- statedata [orderStateData[1],2]
#rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
## rate
}
best("TX", "heart attack")
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
## Validate State
#### Fill validation
statedata <- data[data$State == state, ]  # filters the data frame to corresponding state;
if (outcome == 'heart attack') {
statedata <- statedata[,c(7,2,11)]
} else if (outcome == 'heart failure') {
statedata <- statedata[,c(7,2,17)]
} else if (outcome == 'pneumonia') {
statedata <- statedata[,c(7,2,23)]
} else {
stop("invalid outcome")
}
statedata[,3] <- as.numeric(statedata[,3])
statedata <- na.omit(statedata)
## Return hospital name in that state with lowest 30-day death
orderStateData <- order(statedata[,3], na.last=NA)
hospital <- statedata [orderStateData[1],2]
#rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
## rate
}
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
## Validate State
#### Fill validation
statedata <- data[data$State == state, ]  # filters the data frame to corresponding state;
if (outcome == 'heart attack') {
statedata <- statedata[,c(7,2,11)]
} else if (outcome == 'heart failure') {
statedata <- statedata[,c(7,2,17)]
} else if (outcome == 'pneumonia') {
statedata <- statedata[,c(7,2,23)]
} else {
stop("invalid outcome")
}
statedata[,3] <- as.numeric(statedata[,3])
statedata <- na.omit(statedata)
## Return hospital name in that state with lowest 30-day death
orderStateData <- order(statedata[,3], na.last=NA)
hospital <- statedata [orderStateData[1],2]
#rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
return(hospital)
}
return(hospital)
best("TX", "heart attack")
str(best)
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneunomia")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
"statedata <- data[data$State == "BB", ]
statedata <- data[data$State == "BB", ]
statedata <- subset(data, data$State == "BB")
statedata <- subset(data, data$State == "TX")
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
statedata <- subset(data, data$State == "TX")
statedata <- subset(data, data$State == "BB")
statedata
str(stateData)
?nrows
?nrow
nrow(statedata)
best <- function(state, outcome) {
## Read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
## Validate State
#### Fill validation
statedata <- data[data$State == state, ]  # filters the data frame to corresponding state;
if (nrow(statedata)==0)
stop("invalid state")
if (outcome == 'heart attack') {
statedata <- statedata[,c(7,2,11)]
} else if (outcome == 'heart failure') {
statedata <- statedata[,c(7,2,17)]
} else if (outcome == 'pneumonia') {
statedata <- statedata[,c(7,2,23)]
} else {
stop("invalid outcome")
}
statedata[,3] <- as.numeric(statedata[,3])
statedata <- na.omit(statedata)
## Return hospital name in that state with lowest 30-day death
orderStateData <- order(statedata[,3], na.last=NA)
hospital <- statedata [orderStateData[1],2]
#rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
return(hospital)
}
best("BB", "heart attack")
best("NY", "hert attack")
rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
length (rankStateData)
rankStateData
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
statedata <- data[data$State == "TX", ]
statedata <- statedata[,c(7,2,17)]
statedata[,3] <- as.numeric(statedata[,3])
statedata <- na.omit(statedata)
str(statedata)
rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
length (rankStateData)
orderStateData <- order(statedata[,3], na.last=NA)
str(orderStateData)
hospital <- statedata [orderStateData[4],2]
hospital
statedata
orderStateData
rankStateData
auxdata <- stateData
auxdata$rank <- rankStateData
str(auxdata)
auxdata <- statedata
str(auxdata)
auxdata$rank <- rankStateData
str(auxdata)
auxadata
auxdata
orderStateData <- order(statedata[,3], statedata[,2], na.last=NA)
hospital <- statedata [orderStateData[4],2]
hospital
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
## Validate State
#### Fill validation
statedata <- data[data$State == state, ]  # filters the data frame to corresponding state;
if (nrow(statedata)==0)
stop("invalid state")
if (outcome == 'heart attack') {
statedata <- statedata[,c(7,2,11)]
} else if (outcome == 'heart failure') {
statedata <- statedata[,c(7,2,17)]
} else if (outcome == 'pneumonia') {
statedata <- statedata[,c(7,2,23)]
} else {
stop("invalid outcome")
}
statedata[,3] <- as.numeric(statedata[,3])
statedata <- na.omit(statedata)
rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
if (num=="best") {
r <- 1
} else if (num =="worst") {
r <- length(rankStateData)
} else if (num <= length(a) ) {
r <- num
} else {
r <- NA
}
#auxdata <- statedata
#auxdata$rank <- rankStateData
## Return hospital name in that state with lowest 30-day death
orderStateData <- order(statedata[,3], statedata[,2], na.last=NA)
hospital <- statedata [orderStateData[r],2]
return(hospital)
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source (rankhospital.R)
source ("rankhospital.R")
rankhospital("MN", "heart attack", 5000)
statedata[,3] <- supresssWarnings(as.numeric(statedata[,3]))
statedata[,3] <- supressWarnings(as.numeric(statedata[,3]))
statedata[,3] <- suppressWarnings(as.numeric(statedata[,3]))
source("rankhospital.R")
rankhospital("MN", "heart attack",5000)
rankall <- function(outcome, num = "best") {
## Read outcome data
data <- read.csv("rprog-data-ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character")
state <- data$State
state <- sort(unique(state))
for (i in 1:legth(state)) {   # for each state
statedata <- data[data$State == state[i], ]  # filters the data frame to a state;
## Check that outcome are valid
if (outcome == 'heart attack') {
statedata <- statedata[,c(7,2,11)]
} else if (outcome == 'heart failure') {
statedata <- statedata[,c(7,2,17)]
} else if (outcome == 'pneumonia') {
statedata <- statedata[,c(7,2,23)]
} else {
stop("invalid outcome")
}
statedata[,3] <- suppressWarnings(as.numeric(statedata[,3]))
statedata <- na.omit(statedata)
rankStateData <- rank(statedata[,3], na.last=NA, ties.method="first")
if (num=="best") {
r <- 1
} else if (num =="worst") {
r <- length(rankStateData)
} else if (num <= length(a) ) {
r <- num
} else {
r <- NA
}
if (is.na(r)){
hospital[i] <- NA
} else {
orderStateData <- order(statedata[,3], statedata[,2], na.last=NA)
hospital[i] <- statedata [orderStateData[r],2]
}
}
return(data.frame(hospital=hospital, state=state))
}
head(rankall("heart attack",20),10)
source(rankall.R)
source("rankall.R")
head(rankall("heart attack",20),10)
source("rankall.R")
head(rankall("heart attack",20),10)
source("rankall.R")
head(rankall("heart attack",20),10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
tail(rankall("heart failure"), 10)
df <- data.frame(hospital=hospital, state=state)
state
source("rankall.R")
tail(rankall("heart failure"), 10)
head(rankall("heart attack",20),10)
source("submitscript3.R")
source("submitscript3.R")
submit()
2
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
R.version.string
library(swirl)
swirl()
5+7
x<-5+7
x
y<-x-3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z,555,z)
z*2+100
mySqrt <- sqrt(z-1)
mySqrt
myDiv <- z/mySqrt
myDiv
c(1,2,3,4)+c(0,10)
c(1,2,3,4) + c(0,10,100)
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0,10,by=0.5)
my_seq <- seq(5,10,lenght=30)
my_seq <- seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along=my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect <- c(0.5,55,-10,6)
tf <- num_vect < 1
num_vect
tf
num_vect >= 6
my_char <- c("My","name","is")
my_char
past(my_char, collapse = " ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Rodrigo")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1,2,3), c("X","Y","Z"), sep="")
paste(1:3, c("X","Y","Z"), sep="")
paste(LETTERS, 1:4, sep = "-")
x <- c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
myData <- sample(c(y,z),100)
myNA <- is.na(myData)
myNA
myData == NA
sum(myNA)
myData
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x) & x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo","bar")]
myVector <- 1:20
myVector
dim(myVector)
length (myVector)
dim(myVector) <- c(4,5)
dim(myVector)
attributes(myVector)
myVector
class(myVector)
myMatrix <- myVector
?matrix
myMatrix2 <- (1:20, 4, 5)
myMatrix2 <- matrix (1:20, 4, 5)
identical(myMatrix, myMatrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, myMatrix)
myData <- data.frame(patients, myMatrix)
myData
class(myData)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(myData)
colnames(myData) <- cnames
myData
x <- c(1,3,5)
y <- c(3,2,10)
cbind(x,y)
x <- list(2, "a", "b", TRUE)
x[[2]]
